#!/usr/bin/env python3

import multiprocessing as mp

import pandas as pd

from utils import measure_time


def check_is_anomaly(mean: float, std: float, temperature: float) -> bool:
    lower_bound = mean - 2*std
    upper_bound = mean + 2*std

    return not (lower_bound <= temperature <= upper_bound)


def process_city(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()

    # 1. –í—ã—á–∏—Å–ª–∏—Ç—å —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –æ–∫–Ω–æ–º –≤ 30 –¥–Ω–µ–π –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π.

    # –æ—á–µ–≤–∏–¥–Ω–æ —á—Ç–æ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –≥–æ—Ä–æ–¥—É,
    # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è _—É–∂–µ_ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    # —Ç–∞–∫ —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'temperature_avg' —Å–æ —Å–∫–æ–ª—å–∑—è—â–∏–º —Å—Ä–µ–¥–Ω–∏–º,
    # –Ω–µ –∑–∞–±—ã–≤–∞—è –ø—Ä–æ –¥–Ω–∏ –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º fillna)

    days = 30

    df['temperature_avg'] = df['temperature'] \
        .rolling(window = days) \
        .mean() \
        .fillna(df['temperature'])
    
    # 2. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –≤ –∫–∞–∂–¥–æ–º –≥–æ—Ä–æ–¥–µ.

    # —Å–Ω–æ–≤–∞ –ø–æ–ª—å–∑—É–µ–º—Å—è —Ç–µ–º —Ñ–∞–∫—Ç–æ–º —á—Ç–æ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥
    # –ø–æ—ç—Ç–æ–º—É —Å –∫–∞–π—Ñ–æ–º –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Å–µ–∑–æ–Ω—É
    # –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥ –∫–æ–ª–æ–Ω–∫—É 'temperature'

    season_df = df \
        .groupby(['season'])['temperature'] \
        .agg(['mean', 'std'])
    
    # 3. –í—ã—è–≤–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏, –≥–¥–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—Ä–µ–¥–Ω–µ–µ ¬± 2ùúé.

    # —É –Ω–∞—Å –≤ season_df –ª–µ–∂–∏—Ç mean –∏ std –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∑–æ–Ω–∞
    # —Ç–∞–∫ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –≤ df –∫–æ–ª–æ–Ω–∫—É is_anomaly,
    # –∫–æ—Ç–æ—Ä–∞—è true –µ—Å–ª–∏ not(mean-2std <= 'temperature' <= mean+2std)
    # (–º–æ–∂–Ω–æ –±—ã–ª–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –Ω–æ –º–Ω–µ –ø—Ä–æ—â–µ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é)

    def calculate_anomaly(row: pd.Series) -> bool:
        season = season_df.loc[row['season']]

        return check_is_anomaly(season['mean'], season['std'], row['temperature'])

    df['is_anomaly'] = df[['season', 'temperature']] \
        .apply(calculate_anomaly, axis = 1)
    
    # 4. –¢–µ–ø–µ—Ä—å –≤ df –µ—Å—Ç—å –∫–æ–ª–æ–Ω–æ—á–∫–∞ 'is_anomaly', –≤–æ–∑–≤—Ä–∞—â–∞–µ–º.

    return df


def load_data(filename: str) -> pd.DataFrame:
    df = pd.read_csv(filename, parse_dates = ['timestamp'])

    return df


def split_by_city(df: pd.DataFrame) -> tuple[list[str], list[pd.DataFrame]]:
    # –ø–æ —Ñ–∞–∫—Ç—É –∑–¥–µ—Å—å –Ω–∞–ø–∏—Å–∞–Ω groupby

    cities = df['city'].unique()
    groups = []

    for city in cities:
        groups.append(df[df['city'] == city])

    return list(cities), groups


def join_by_city(cities: list[str], processed: list[pd.DataFrame]) -> pd.DataFrame:
    results = {
        city: group for city, group in zip(cities, processed)
    }

    df = pd.concat(results.values())
    df = df.reset_index(drop = True)

    return df


def process(df: pd.DataFrame) -> pd.DataFrame:
    # —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º

    cities, groups = split_by_city(df)

    # –ø—Ä–æ—Ü–µ—Å—Å–∏–º –∫–∞–∂–¥—ã–π –≥–æ—Ä–æ–¥ _–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ_

    processed = [process_city(group) for group in groups]

    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ

    return join_by_city(cities, processed)


def process_parallel(df: pd.DataFrame, workers: int) -> pd.DataFrame:
    # —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º

    cities, groups = split_by_city(df)

    # –ø—Ä–æ—Ü–µ—Å—Å–∏–º –∫–∞–∂–¥—ã–π –≥–æ—Ä–æ–¥ _–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ_
    # —Ç–∞–∫ –∫–∞–∫ df-—á–∏–∫ —Ä–∞–∑–±–∏—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º,
    # –∏ –≥–æ—Ä–æ–¥–∞ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞,
    # —Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ

    with mp.Pool(workers) as pool:
        processed = pool.map(process_city, groups)

    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ

    return join_by_city(cities, processed)


if __name__ == '__main__':
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    # –ø—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —á—Ç–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –º—ã –Ω–µ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º
    # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ —Å–∞–º–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞

    df = load_data('temperature_data.csv')

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –∑–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è

    with measure_time() as measure:
        result1 = process(df)

    print(f'process time: {measure():.4f} seconds')

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –∑–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è

    workers = 4

    with measure_time() as measure:
        result2 = process_parallel(df, workers)

    print(f'process parallel time: {measure():.4f} seconds')

    # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

    print(f'result1 == result2: {result1.equals(result2)}')

    # –∏—Ç–æ–≥–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:
    # - —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —á—Ç–æ _–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ_ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    #   –¥–∞–∂–µ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º _–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ_
    #   (0.9 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—Ç–∏–≤ 1.1 —Å–µ–∫—É–Ω–¥—ã)
    # - —è —ç—Ç–æ —Å–≤—è–∑—ã–≤–∞—é —Å —Ç–µ–º, —á—Ç–æ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
    #   –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö (–≤–µ—Å—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º)
    #   –∏ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    # - —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å
    #   –Ω–µ –≤ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö, –∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö (threading)
    #   –Ω–æ –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ –∏–∑-–∑–∞ –Ω–∞–ª–∏—á–∏—è GIL –ø–∏—Ç–æ–Ω –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ç–∞–∫–æ–º—É
    #   (–≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è —Ç–∞–∫–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∫–∞–∫–∏–µ-—Ç–æ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pandas)
    # - –ø–æ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ –≤ streamlit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

    # –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –≤–æ–ø—Ä–æ—Å:
    #   –∞ –ø–æ—á–µ–º—É –≤–æ–æ–±—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º?
    # –æ—Ç–≤–µ—Ç:
    #   –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ –≥–æ—Ä–æ–¥ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏—Ç—å
    #   –º—ã —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞,
    #   –ø–æ—ç—Ç–æ–º—É —Ä–∞–∑–±–∏—Ç—å —Å–∏–ª—å–Ω–µ–µ —á–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –±—ã

    # –≤–æ–ø—Ä–æ—Å:
    #   –ø–æ—á–µ–º—É –±—ã –Ω–µ –≤—ã–Ω–µ—Å—Ç–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º –∏ –∑–∞–º–µ—Ä—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥?
    # –æ—Ç–≤–µ—Ç:
    #   —è –ø—Ä–æ–±–æ–≤–∞–ª —Ç–∞–∫, —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å,
    #   –ø–æ—Å–∫–æ–ª—å–∫—É —Å–∞–º–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤—Å—ë –µ—â—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    #   –∞ –≤ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≥—Ä—É–ø–ø—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º
